import json
import cv2
import base64
import numpy as np
import requests
import time
import random
from simplegmail import Gmail

with open('roboflow_config.json') as f:
    config = json.load(f)
    ROBOFLOW_API_KEY = config["ROBOFLOW_API_KEY"]
    ROBOFLOW_MODEL = config["ROBOFLOW_MODEL"]
    ROBOFLOW_SIZE = config["ROBOFLOW_SIZE"]



upload_url = "".join([
    "https://detect.roboflow.com/",
    ROBOFLOW_MODEL,
    "?api_key=",
    ROBOFLOW_API_KEY,
    "&format=json",
    "&stroke=5"
])

# Define gmail address and content to send alert
gmail = Gmail()
params = {
        "to": "aimodeltesting2023@gmail.com",
        "sender": "emzhao2023@gmail.com",
        "subject": "Firearm Detected by AI Model",
        "msg_plain": "Target Detected! Immediate action required.",
        "attachments": ["detect.jpg"]
        }
        
# Get webcam interface via opencv-python
video = cv2.VideoCapture(0)
stack = 0

# Infer via the Roboflow Infer API and return the result
def infer():
    # Get the current image from the webcam
    
    global stack  
    ret, img = video.read()

    # Resize (while maintaining the aspect ratio) to improve speed and save bandwidth
    height, width, channels = img.shape
    scale = ROBOFLOW_SIZE / max(height, width)
    img = cv2.resize(img, (round(scale * width), round(scale * height)))

    # Encode image to base64 string
    retval, buffer = cv2.imencode('.jpg', img)
    img_str = base64.b64encode(buffer)

    # Get prediction from Roboflow Infer API
    resp = requests.post(upload_url, data=img_str, headers={
        "Content-Type": "application/x-www-form-urlencoded"
    }, stream=True).raw

    try:
        resp = json.loads(resp.read())
    except:
        print("could not parse respnose")
        
# Set the detection threshold as '0.425' and highlight the detected object
    preds=resp["predictions"]
    for pred in preds:
        if pred["confidence"]>0.425:
            print("Firearm deteced!confidence:", pred['confidence'])
            x1 = round(pred["x"] - pred["width"] / 2)
            x2 = round(pred["x"] + pred["width"] / 2)
            y1 = round(pred["y"] - pred["height"] / 2)
            y2 = round(pred["y"] + pred["height"] / 2)
            cv2.rectangle(img, (x1, y1), (x2, y2), (190,64,220), 5)

            stack = stack + pred['confidence']
            
    return img

# Main loop; infers sequentially until you press "q"
while 1:
    # On "q" keypress, exit
    if(cv2.waitKey(1) == ord('q')):
        break

    # Capture start time to calculate fps
    start = time.time()

    # Synchronously get a prediction from the Roboflow Infer API
    image = infer()
    cv2.imshow('image', image)
    if stack > 5:
        cv2.imwrite('detect.jpg', image)
        message = gmail.send_message(**params)
        print('alert sent', stack)
        stack = 0
    # Print frames per second
    print((1/(time.time()-start)), " fps")
video.release()
cv2.destroyAllWindows()
